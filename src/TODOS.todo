Views:
Your application should have, at a minimum, four views:

Default (Root):
  ☐ should list all available categories, which should link to a category view for that category
  ☐ should list all of the posts ordered by voteScore (highest score first)
  ☐ should have a control for changing the sort method for the list, including at minimum, order by voteScore and order by timestamp
  ☐ should have a control for adding a new post
Category View:
  ☐ identical to the default view, but filtered to only include posts with the selected category
Post Detail View:
  ☐ should show the details of a post, including: Title, Body, Author, timestamp (in user readable format), and vote score
  ☐ should list all of the comments for that post, ordered by voteScore (highest first)
  ☐ should have controls to edit or delete the post
  ☐ should have a control to add a new comment.
  ☐ implement comment form however you want (inline, modal, etc.)
  ☐ comments should also have controls for editing or deleting
Create/Edit View:
  ☐ should have a form to create new post or edit existing posts
  ☐ when editing, existing data should be populated in the form













Readable:

CurrentTODOS:
  ☐ POSTS:
  ☐ Detail:

Is application state managed by Redux?:
Does application state update correctly?:

Application Functionality:

Does the post detail page have desired functionality?:

Can users add new posts?:

Can users add comments?:

Can users edit posts/comments?:

Can users delete posts/comments?:
  Clicking the button/link correctly removes the post/comment from list view and makes post inaccessible at it's URL.

Is the application navigable?:



ctrl-d: toggle completion of the task
ctrl-shift-a: move all completed tasks to the archive section
alt-c: cancel the selected tasks
ctrl-shift-s: add/update timestamp for current task

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
  ☐ Orderby
  ☐ Comments Count
  ☐ Rater Working
  ☐ Edit Posts
  ☐ List of Comments
  ☐ Rater Working
  ☐ Add Comment
  ☐ Delete Comment
  ☐ Comment Rater Working
  ☐ Edit Comment
  ☐ Listed posts are displayed with title, author, number of comments, current score, and a voting mechanism to upvote or downvote the post. Posts should have buttons or links for editing or deleting that post.
  ☐ Post is displayed with title, body, author, number of comments, current score and voting mechanism. Post should have buttons or links for editing or deleting that post.
  ☐ Listed comments are displayed with author, current score, and a voting mechanism to upvote or downvote the comment. Comments should have buttons or links for editing or deleting that comment.
  ☐ The voting mechanism works and correctly displays the new vote score after clicking for both the post and comments.
  ☐ A mechanism for adding a new comment is visible on the detail page and functional.
  ☐ Application has a form for adding comments to a post. Submitting the form properly adds the comment to the correct post.
  ☐ Edit buttons for posts/comments open a form with existing data pre-populated. Submitting the form correctly updates the data for the comment/post.
  ☐ A mechanism for deleting posts and comments exists.
  ☐ The voting mechanism works and correctly displays the new vote score after clicking.
  ☐ List pages (root or category) include a mechanism for sorting by date or by score (at a minimum) and the sort works properly.
  ☐ Most application state is managed by the Redux store. State-based props are mapped from the store rather than stored as component state.
  ☐ Form inputs and controlled components may have some state handled by the component.
  ☐ Updates are triggered by dispatching actions to reducers.
  ☐ Reducers and actions are written properly and correctly return updated state to the store.
  ☐ List posts link to the detail page for that post.
  ☐ All posts are listed at the root.
  ☐ All posts for a category are listed at /:category
  ☐ Post detail is available at /:category/:post_id
  ☐ All comments for a post are displayed below the post body.
  ☐ Application has a form for creating a new post. Submitting the form properly adds the post to the correct category.
  ☐ User is able to navigate between categories, main page and post detail pages without typing address in the address bar.
